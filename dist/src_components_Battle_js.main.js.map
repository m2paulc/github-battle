{"version":3,"file":"src_components_Battle_js.main.js","mappings":"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","sources":["webpack://github-battle/./src/components/Battle.js","webpack://github-battle/./src/components/Results.js"],"sourcesContent":["import * as React from 'react';\r\nimport { FaUserFriends, FaFighterJet, FaTrophy, FaTimesCircle } from 'react-icons/fa';\r\nimport PropTypes from 'prop-types';\r\nimport Results from './Results';\r\nimport { ThemeConsumer } from '../context/theme';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Instructions() {\r\n  return (\r\n    <ThemeConsumer>\r\n      {({ theme }) => (\r\n        <div className='instructions-container'>\r\n          <h1 className='center-text header-lg'>\r\n            Instructions\r\n          </h1>\r\n          <ol className='container-sm grid center-text battle-instructions'>\r\n            <li>\r\n              <h3 className='header-sm'>Enter two Github users</h3>\r\n              <FaUserFriends className={`bg-${theme}`} color='rgb(255, 191, 116)' size={140} />\r\n            </li>\r\n            <li>\r\n              <h3 className='header-sm'>Battle</h3>\r\n              <FaFighterJet className={`bg-${theme}`} color='#727272' size={140} />\r\n            </li>\r\n            <li>\r\n              <h3 className='header-sm'>See the winners</h3>\r\n              <FaTrophy className={`bg-${theme}`} color='rgb(255, 215, 0)' size={140} />\r\n            </li>\r\n          </ol>\r\n        </div>\r\n      )}\r\n    </ThemeConsumer>\r\n\r\n  );\r\n}\r\n\r\nclass PlayerInput extends React.Component {\r\n  state = {\r\n    username: ''\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.props.onSubmit(this.state.username);\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      username: event.target.value\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <ThemeConsumer>\r\n        {({ theme }) => (\r\n          <form className='column player' onSubmit={this.handleSubmit}>\r\n            <label htmlFor='username' className='player-label'>\r\n              {this.props.label}\r\n            </label>\r\n            <div className='row player-inputs'>\r\n              <input\r\n                type='text'\r\n                id='username'\r\n                className={`input-${theme}`}\r\n                placeholder='github username'\r\n                autoComplete='off'\r\n                value={this.state.username}\r\n                onChange={this.handleChange}\r\n              />\r\n              <button\r\n                className={`btn ${theme === 'dark' ? 'light-btn' : 'dark-btn'}`}\r\n                type='submit'\r\n                disabled={!this.state.username}\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </ThemeConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nPlayerInput.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired\r\n};\r\n\r\nfunction PlayerPreview({ username, onReset, label }) {\r\n  return (\r\n    <ThemeConsumer>\r\n      {({ theme }) => (\r\n        <div className='column player'>\r\n          <h3 className='player-label'>{label}</h3>\r\n          <div className={`row bg-${theme}`}>\r\n            <div className='player-info'>\r\n              <img\r\n                className='avatar-small'\r\n                src={`https://github.com/${username}.png?size=200`}\r\n                alt={`Avatar for ${username}`}\r\n              />\r\n              <a\r\n                href={`https://github.com/${username}`}\r\n                className='link'>\r\n                {username}\r\n              </a>\r\n            </div>\r\n            <button className='btn-clear flex-center' onClick={onReset}>\r\n              <FaTimesCircle color='rgb(194, 57, 42)' size={26} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nPlayerPreview.propTypes = {\r\n  username: PropTypes.string.isRequired,\r\n  onReset: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired\r\n};\r\n\r\nexport default class Battle extends React.Component {\r\n  state = {\r\n    playerOne: null,\r\n    playerTwo: null\r\n  };\r\n\r\n  handleSubmit = (id, player) => {\r\n    this.setState({\r\n      [id]: player\r\n    });\r\n  };\r\n  handleReset = (id) => {\r\n    this.setState({\r\n      [id]: null\r\n    });\r\n  };\r\n  render() {\r\n    const { playerOne, playerTwo } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Instructions />\r\n\r\n        <div className='players-container'>\r\n          <h1 className='center-text header-lg'>Players</h1>\r\n          <div className='row space-around'>\r\n            {playerOne === null\r\n              ? <PlayerInput\r\n                label='Player One'\r\n                onSubmit={(player) => this.handleSubmit('playerOne', player)}\r\n              />\r\n              : <PlayerPreview\r\n                username={playerOne}\r\n                label='Player One'\r\n                onReset={() => this.handleReset('playerOne')}\r\n              />\r\n            }\r\n\r\n            {playerTwo === null\r\n              ? <PlayerInput\r\n                label='Player Two'\r\n                onSubmit={(player) => this.handleSubmit('playerTwo', player)}\r\n              />\r\n              : <PlayerPreview\r\n                username={playerTwo}\r\n                label='Player Two'\r\n                onReset={() => this.handleReset('playerTwo')}\r\n              />\r\n            }\r\n          </div>\r\n          {playerOne && playerTwo && (\r\n            <Link\r\n              className='btn dark-btn btn-space'\r\n              to={{\r\n                pathname: '/battle/results',\r\n                search: `?playerOne=${playerOne}&playerTwo=${playerTwo}`\r\n              }}\r\n            >Battle</Link>\r\n          )}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport { Link, useSearchParams } from \"react-router-dom\";\r\nimport queryString from 'query-string';\r\nimport { battle } from \"../utils/api\";\r\nimport { FaCompass, FaBriefcase, FaUserFriends, FaUsers, FaUser, FaCode } from \"react-icons/fa\";\r\nimport Card from \"./Card\";\r\nimport Loading from \"./Loading\";\r\nimport PropTypes from \"prop-types\";\r\nimport Tooltip from \"./Tooltip\";\r\n\r\nfunction ProfileList({ profile }) {\r\n  return (\r\n    <ul className=\"card-list\">\r\n      <li>\r\n        <FaUser color=\"rgb(239,115,115)\" size={22} />\r\n        {profile.name}\r\n      </li>\r\n      {profile.location && (\r\n        <li>\r\n          <Tooltip text=\"User's Location\">\r\n            <FaCompass color=\"rgb(144,115,255)\" size={22} />\r\n            {profile.location}\r\n          </Tooltip>\r\n        </li>\r\n      )}\r\n      {profile.company && (\r\n        <li>\r\n          <Tooltip text=\"User's Company\">\r\n            <FaBriefcase color=\"rgb(144,115,255)\" size={22} />\r\n            {profile.company}\r\n          </Tooltip>\r\n        </li>\r\n      )}\r\n      <li>\r\n        <FaUsers color=\"rgb(129,195,245)\" size={22} />\r\n        {profile.followers.toLocaleString()} Followers\r\n      </li>\r\n      <li>\r\n        <FaUserFriends color=\"rgb(64,183,95)\" size={22} />\r\n        {profile.following.toLocaleString()} Following\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nProfileList.propTypes = {\r\n  profile: PropTypes.object.isRequired\r\n};\r\nexport default class Results extends React.Component {\r\n  state = {\r\n    winner: null,\r\n    loser: null,\r\n    error: null,\r\n    loading: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    // debugger;\r\n    const { playerOne, playerTwo } = queryString.parse(window.location.search);\r\n\r\n    battle([playerOne, playerTwo])\r\n      .then((players) => {\r\n        this.setState({\r\n          winner: players[0],\r\n          loser: players[1],\r\n          error: null,\r\n          loading: false\r\n        });\r\n      }).catch(({ message }) => {\r\n        this.setState({\r\n          error: message,\r\n          loading: false\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const { winner, loser, error, loading } = this.state;\r\n\r\n    if (loading === true) {\r\n      return <Loading />;\r\n    }\r\n\r\n    if (error) {\r\n      return (<p className=\"center-text error\">{error}</p>);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"grid space-around container-sm\">\r\n          <Card\r\n            header={winner.score === loser.score ? 'Tie' : 'Winner'}\r\n            subheader={`Score: ${winner.score.toLocaleString()}`}\r\n            avatar={winner.profile.avatar_url}\r\n            href={winner.profile.html_url}\r\n            name={winner.profile.login}\r\n          >\r\n            <ProfileList profile={winner.profile} />\r\n          </Card>\r\n          <Card\r\n            header={winner.score === loser.score ? 'Tie' : 'Loser'}\r\n            subheader={`Score: ${loser.score.toLocaleString()}`}\r\n            avatar={loser.profile.avatar_url}\r\n            href={loser.profile.html_url}\r\n            name={loser.profile.login}\r\n          >\r\n            <ProfileList profile={loser.profile} />\r\n          </Card>\r\n        </div >\r\n        <Link\r\n          className=\"btn dark-btn btn-space\"\r\n          to='/battle'\r\n        >\r\n          Reset\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"names":["React","FaUserFriends","FaFighterJet","FaTrophy","FaTimesCircle","PropTypes","Results","ThemeConsumer","Link","Instructions","theme","PlayerInput","username","event","preventDefault","props","onSubmit","state","setState","target","value","handleSubmit","label","handleChange","Component","propTypes","func","isRequired","string","PlayerPreview","onReset","Battle","playerOne","playerTwo","id","player","handleReset","pathname","search","useSearchParams","queryString","battle","FaCompass","FaBriefcase","FaUsers","FaUser","FaCode","Card","Loading","Tooltip","ProfileList","profile","name","location","company","followers","toLocaleString","following","object","winner","loser","error","loading","parse","window","then","players","message","score","avatar_url","html_url","login"],"sourceRoot":""}